---
title: "Math 430: Lecture 1b"
subtitle: "Introduction to toolkit"
author: "Professor Catalina Medina"
execute:
  echo: true
format: 
  revealjs:
    theme: [sky, ../slide-style.scss]
    slide-number: true
---

# Coding foundations with R

## R as a calculator

```{r}
2 + 2
sqrt(6 *(18 / 5)^2 * exp(13))
```

What you see is

- a line of code (starting with the code line number "1")
- a line of output (starting with "[1]")

## Creating an object

We can save things into an object using the assignment operator `<-`

```{r}
my_calculation <- 2 * 4
```

I can name it almost whatever I wish

```{r}
magical_purple_dragon <- 2 * 4
```

Names of objects:

- must begin with a letter
- contain letters &/or numbers
- separate with "_" (underscore) *or a "." (period)*

## Naming an object

You can view what is in an object
```{r}
favorite_color <- "olive green"

favorite_color
```

R is case sensitive
```{r}
#| error: true
Favorite_color
```

::: callout-tip
Let R autocomplete for you to avoid spelling mistakes
:::

## Vectors

Objects can store vectors also
```{r}
apple_colors <- c("green", "yellow", "red")
apple_colors
```

We can also do elementwise math with vectors
```{r}
x <- c(3, 6, 9, 12)
y <- x / 3
y
```

```{r}
x - y
```


## Data frames

The most common object type we will use are data frames
```{r}
apple_data <- data.frame(
  apple_colors = c("green", "yellow", "red"), 
  apple_count = c(3, 17, 8)
)

apple_data
```

## Vocabulary

```{r eval=FALSE}
do(something)
```

`do()` is a function;   
`something` is the argument of the function.

. . .

```{r eval=FALSE}
do(something, colorful)
```

`do()` is a function;   
`something` is the first argument of the function;   
`colorful` is the second argument of the function.

## Example function calls

Sometimes you may only want to specify one argument
```{r}
pnorm(1.65)
```

Sometimes you want to provide multiple arguments
```{r}
my_data <- c(2, 4, 7, 3, 6, 2, 5, 6)

t.test(my_data, alternative = "two.sided", conf.level = 0.95)
```


## Getting Help

In order to get any help we can use `?` followed by function (or object) name. 

```{r eval=FALSE}
?t.test
```

. . . 

Using comments with `#` in your code for less obvious tasks can be helpful

```{r}
# This is just a comment and is not processed as code
# Converted from Celsius to Fahrenheit. F = (C * 9 / 5) + 32
my_temperature <- 36.7
my_temperature <- (my_temperature * 9 / 5) + 32
my_temperature
```

##

```{r}
#| echo: false
#| fig-align: center
#| fig-out: 80%
knitr::include_graphics("img/chatgpt_sort_help.png")
```

::: callout-tip
[AI tools](https://openai.com/index/introducing-chatgpt-edu/) can be helpful for finding functions and providing examples.
:::

## 

::: callout-warning
You should not copy paste code from my slides or from the internet. 
Part of learning to code is building up your muscle memory. 

Do not assume that AI tools will be correct. 
Even if the code runs it may not be the proper way of doing something.

If the code example is very long or does not use functions we discussed in class, refine your question.
:::


# Literate programming with Quarto documents in RStudio

## Quarto

<center>

<video width="80%" height="45%%" align = "center" controls>
  <source src="screencast/01c-intro-quarto.mov" type="video/mp4">
</video>

</center>


## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.001.png")
```

## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.002.png")
```

## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.003.png")
```

## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.004.png")
```

## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.005.png")
```

## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.007.png")
```

## Quarto parts

```{r}
#| echo: false
knitr::include_graphics("img/quarto.006.png")
```

## Slides for this course

Slides that you are currently looking at are also written in Quarto. You can take a look at them on in the [GitHub repository](https://github.com/csuci-math430/lectures) I use to make the slides.

# R packages

## Phone apps vs. R packages

:::: {.columns}

::: {.column width="50%"}
When you buy a new phone it comes with some apps pre-installed.

- Calendar
- Email
- Messages
:::

::: {.column width="50%"}
If you want to use a different app you can install it.

- Instagram
- GMail
- BlueSky
:::

::::

When you download R for the first time to your computer. It comes with some packages already installed. You can also install many other R packages.

## R packages

What do R packages have? All sorts of things but mainly

- functions 

- datasets

In order to use a packages you have to:

1. install it (once per device)
```{r}
#| eval: false
install.packages("tidyverse")
```

2. load it (in each Quarto document)
```{r}
#| eval: false
library(tidyverse)
```

## R packages

Try running the following code and look at the error:

```{r error = TRUE}
beep()
```

The function `beep()` is from the `beepr` package, so we have to (1) make sure it is installed and then (2) load it

```{r warning = FALSE, eval = FALSE}
library(beepr)
beep()
```


# Getting to know data

[Dear Mona, Which State Has the Worst Drivers?](https://fivethirtyeight.com/features/which-state-has-the-worst-drivers/)

```{r}
library(fivethirtyeight)
library(tidyverse)
data("bad_drivers")
```

When you are given some code like this one in your lecture notes or assignments, you should run it first before beginning to code. As we progress in the course, you'll have a deeper understanding of what the starter codes do.

## Data frames  

```{r echo=FALSE, out.width='100%'}
knitr::include_graphics('img/data-matrix.png')
knitr::include_graphics('img/data-matrix-tail.png')
```

## Data frame

```{r}
ncol(bad_drivers)

nrow(bad_drivers)
```

- The data frame has `r ncol(bad_drivers)` __variables__ (state, num_drivers, perc_speeding, perc_not_distracted, perc_no_previous, insurance_premiums, losses). 

- The data frame has `r nrow(bad_drivers)` __cases__ or __observations__. Each case represents a US state (or District of Columbia). 

## Data documentation

```{r}
#| eval: false
?bad_drivers
```


# Functions for viewing data frames

## View top of data frame

```{r}
head(bad_drivers)
```

## View bottom of data frame

```{r}
tail(bad_drivers)
```

## View structure of data frame

```{r}
glimpse(bad_drivers)
```

# Functions to import and export data

Import
```{r}
unemployment <- read_csv("http://csuci-math430.github.io/lectures/week-01/data/unemployment_rate_by_age_groups.csv")
```

Export
```{r}
#| eval: false
write_csv(unemployment, file = "unemployment-data.csv")
```

. . . 

::: callout-tip
A lot of headaches can be prevented from using `read_csv()` NOT `read.csv()`!
:::
